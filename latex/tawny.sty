\ProvidesPackage{tawny}
%% This defines a new language and style for the listings package.
%% Stick \usepackage{tawny} into your preamble and all should work.
%% This supports Clojure and Tawny-OWL.

\RequirePackage{xcolor}
\RequirePackage{listings}
\RequirePackage{clojure}

\lstdefinelanguage{tawny}%
{%
  language=clojure,%
  keywords=[4]{!, &&, *current-bound-ontology*, add-a-name-annotation,
    add-a-simple-annotation, add-an-ontology-annotation,
    add-an-ontology-name, add-annotation, add-axiom,
    add-characteristics, add-class, add-comment,
    add-data-characteristics, add-data-disjoint, add-data-domain,
    add-data-equivalent, add-data-range, add-data-superproperty,
    add-datatype-equivalent, add-different, add-disjoint,
    add-disjoint-property, add-disjoint-union, add-domain,
    add-equivalent, add-equivalent-property, add-fact, add-has-key,
    add-inverse, add-label, add-range, add-same, add-see-also,
    add-subclass, add-subpropertychain, add-super-annotation,
    add-superproperty, add-type, add-version-info,
    alter-all-symbol-after-def-form, alter-symbol-after-def-form,
    annotation, annotation-property, annotation-property-explicit,
    annotation-property-handlers, as-disjoint, as-disjoint-subclasses,
    as-equivalent, as-inverse, as-named-object, as-subclasses,
    at-least, at-most, backward-compatible-with,
    backward-compatible-with-property, broadcast-ontology,
    broadcast-ontology-maybe, charfuncs, check-entity-set, data-and,
    data-at-least, data-at-most, data-exactly, data-get-fact,
    data-get-fact-not, data-has-value, data-not, data-oneof,
    data-only, data-or, data-some, datacharfuncs, datatype,
    datatype-explicit, datatype-handlers, datatype-property,
    datatype-property-explicit, datatype-property-handlers,
    declare-classes, defaproperty, default-ontology,
    default-ontology-hook, default-ontology-maybe, defbdontfn,
    defbmontfn, defclass, defclassn, defcopy, defdatatype, defdontfn,
    defdproperty, defindividual, defmontfn, defnwithfn, defontology,
    defoproperty, defrefine, defrefineto, deprecated,
    deprecated-property, direct-subclasses, direct-superclasses,
    disjoint-classes, disjoint-data-properties, disjoint-properties,
    disjoint?, ensure-annotation-property, ensure-class,
    ensure-data-property, ensure-data-range, ensure-datatype,
    ensure-individual, ensure-object-property, entity-for-iri,
    entity-for-string, equivalent-classes, equivalent-data-properties,
    equivalent-properties, equivalent?, exactly, fact, fact-not,
    gci, get-annotation-property, get-current-ontology,
    get-current-ontology-maybe, get-fact, get-fact-not, get-iri,
    get-prefix, guess-individual-literal,
    guess-individual-literal-args, guess-type, guess-type-args,
    guess-type-error, has-self, has-value, incompatible-with,
    incompatible-with-property, individual, individual-explicit,
    individual-handlers, intern-owl, intern-owl-entity-hook,
    intern-owl-string, inverse, inverse?, iri, iri-for-name,
    is-defined-by, is-defined-by-property, label, label-property,
    literal, max-inc, min-inc, min-max, min-max-inc, named-object?,
    object-and, object-at-least, object-at-most, object-exactly,
    object-get-fact, object-get-fact-not, object-has-value,
    object-not, object-oneof, object-only, object-or, object-property,
    object-property-explicit, object-property-handlers, object-some,
    object-some-only, oneof, only, ontology, ontology-for-namespace,
    ontology-handlers, ontology-options, ontology-options-atom,
    ontology-to-namespace, owl-and, owl-class, owl-class-explicit,
    owl-class-handlers, owl-comment, owl-comment-property,
    owl-data-factory, owl-import, owl-max, owl-min, owl-not,
    owl-nothing, owl-only, owl-ontology-manager, owl-or, owl-some,
    owl-thing, owl2datatypes, prefix-symbol, refine, remove-axiom,
    remove-entity, remove-ontology-from-namespace-map,
    remove-ontology-hook, remove-ontology-maybe, run-intern-hook,
    save-ontology, see-also, see-also-property, set-iri-gen,
    set-prefix, some-only, span, subclass?, subclasses, subclasses-1,
    suffix-symbol, superclass?, superclasses, superclasses-1,
    tawny-annotation, tawny-annotation-property, tawny-base-url,
    tawny-iri, tawny-name, tawny-name-property, tawny-ontology,
    test-ontology, var-get-maybe, version-info, version-info-property,
    vowl-data-factory, vowl-ontology-manager, vtawny-ontology,
    with-ontology, with-optional-class, with-prefix,
    with-probe-axioms, with-probe-entities, with-suffix, ||},%
  morekeywords=[3]{:superclass, :subclass,: subproperty,
    :super, :sub, :subchain,
    :superproperty, :comment, :add-label, :annotation, :transitive,
    :functional, :inversefunctional, :symmetric, :asymmetric,
    :irreflexive, :reflexive, :label, :equivalent, :domain, :range,
    :characteristic, :disjoint, :iri-gen, :prefix, :name, :same, :seealso,
    :versioninfo, :inverse, :subpropertychain, :superpropertychain,
    :type, :fact, :some, :different, :haskey, :iri},%
  alsoletter={-,?,|,&,1,2,*,>,!,:},%
}

\lstdefinestyle{tawnystyle}
{%
  style=clojurestyle,%
  language=tawny,%
  keywordstyle=[4]\color{brown},% %%Tawny-OWL functions
  %% keywordstyle=[3]\color{cyan},% %%Tawny-OWL handlers
}